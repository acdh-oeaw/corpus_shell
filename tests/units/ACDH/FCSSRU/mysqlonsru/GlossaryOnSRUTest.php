<?php

namespace tests\unit\ACDH\FCSSRU\mysqlonsru;

use Tests\Common\XPathTestCase,
    ACDH\FCSSRU\mysqlonsru\GlossaryOnSRU,
    ACDH\FCSSRU\SRUWithFCSParameters,
    ACDH\FCSSRU\IndentDomDocument;

$runner = true;

require_once __DIR__ . '/../../../../../vendor/autoload.php';
require_once __DIR__ . '/../../../../common/XPathTestCase.php';
//require_once __DIR__ . '/../../../../common/switchParts.php';
require_once __DIR__ . '/../../../../../modules/mysqlonsru/GlossaryOnSRU.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-22 at 21:06:47.
 */
class GlossaryOnSRUTest extends XPathTestCase {

    /**
     * @var GlossaryOnSRU
     */
    protected $t;
    /**
     * Project root directory
     * @var string
     */
    protected $pr;
    
    /**
     * @var ACDH\FCSSRU\IndentDomDocument
     */
    protected $df;
    
    protected $dbMock;
    protected $lineMock;
    
    protected $context = 'arz_eng_06';
    protected $params;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        global $vlibPath;
        
        $this->pr = __DIR__ . '/../../../../../';
        $vlibPath = $this->pr . 'modules/utils-php/vlib/vlibTemplate.php';
        
        $this->params = new SRUWithFCSParameters('lax');
        $this->params->recordPacking = 'raw';
        $this->params->operation = 'explain';
        $this->params->xcontext = $this->context;
        $this->params->context = array($this->context);

        $this->t = new GlossaryOnSRU($this->params);
        
//        $this->dbMock = $this->getMock('mysqli',
        $this->dbMock = $this->getMock('NoRealClass',
                array('query', 'escape_string'));
        $ref = new \ReflectionProperty('ACDH\FCSSRU\mysqlonsru\GlossaryOnSRU', 'db');
        $ref->setAccessible(true);
        $ref->setValue($this->t, $this->dbMock);
        
        $this->df = new IndentDomDocument();
        $this->namespaces = array(
            'http://www.tei-c.org/ns/1.0' => 'tei',
            'http://clarin.eu/fcs/1.0' => 'fcs',
            'http://explain.z3950.org/dtd/2.0/' => 'zr',
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->params = null;      
    }

    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_explain() {
        $this->dbMock->expects($this->exactly(1))->method('query')
                ->with("SELECT entry FROM $this->context WHERE id = 1")
                ->willReturn(false);
        $ret = $this->t->explain();
        $this->assertInstanceOf('ACDH\\FCSSRU\\Http\\Response', $ret);
        $this->assertNotEquals('', $ret->getBody());
    }
    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_scan() {
        $this->params->operation = 'scan';
        $this->dbMock->expects($this->exactly(1))->method('query')
                ->with("SELECT ndx.txt, base.entry, base.sid, COUNT(*) FROM $this->context AS base ".
                       "INNER JOIN ".
                       "(SELECT ndx.id, ndx.txt FROM $this->context"."_ndx AS ndx ".
                       "WHERE ndx.txt LIKE '%%' GROUP BY ndx.id) AS ndx ".
                       "ON base.id = ndx.id  GROUP BY ndx.txt ORDER BY ndx.txt")
                ->willReturn(false);
        $ret = $this->t->scan();
        $this->assertInstanceOf('ACDH\FCSSRU\SRUDiagnostics', $ret);
    }
    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_search() {
        $this->params->operation = 'searchRetrieve';
        $query = 'waer';
        $this->params->query = $query;
        $this->dbMock->expects($this->at(0))->method('escape_string')
                ->with($this->params->query)
                ->willReturn($this->params->query);
        $this->dbMock->expects($this->at(1))->method('query')
                ->with("SELECT entry FROM $this->context WHERE id = 1")
                ->willReturn(false);
        $this->dbMock->expects($this->at(2))->method('query')
                ->with("SELECT COUNT(*)  FROM $this->context AS base INNER JOIN (SELECT ndx.id, ndx.txt FROM $this->context"."_ndx AS ndx WHERE ndx.txt LIKE '%$query%' GROUP BY ndx.id) AS ndx ON base.id = ndx.id ")
                ->willReturn(false);
        $this->dbMock->expects($this->at(3))->method('query')
                ->with("SELECT ndx.txt, base.entry, base.sid, COUNT(*) FROM $this->context AS base INNER JOIN (SELECT ndx.id, ndx.txt FROM $this->context"."_ndx AS ndx WHERE ndx.txt LIKE '%$query%' GROUP BY ndx.id) AS ndx ON base.id = ndx.id  GROUP BY base.sid LIMIT 0, 10")
                ->willReturn(false);
        $ret = $this->t->search();
        $this->assertInstanceOf('ACDH\FCSSRU\SRUDiagnostics', $ret);
    }
    

}
