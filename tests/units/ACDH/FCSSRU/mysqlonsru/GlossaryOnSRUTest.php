<?php

namespace tests\unit\ACDH\FCSSRU\mysqlonsru;

use Tests\Common\XPathTestCase,
    ACDH\FCSSRU\mysqlonsru\GlossaryOnSRU,
    ACDH\FCSSRU\SRUWithFCSParameters,
    ACDH\FCSSRU\IndentDomDocument;

$runner = true;

require_once __DIR__ . '/../../../../../vendor/autoload.php';
require_once __DIR__ . '/../../../../common/XPathTestCase.php';
//require_once __DIR__ . '/../../../../common/switchParts.php';
require_once __DIR__ . '/../../../../../modules/mysqlonsru/GlossaryOnSRU.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-22 at 21:06:47.
 */
class GlossaryOnSRUTest extends XPathTestCase {

    /**
     * @var GlossaryOnSRU
     */
    protected $t;
    /**
     * Project root directory
     * @var string
     */
    protected $pr;
    
    /**
     * @var ACDH\FCSSRU\IndentDomDocument
     */
    protected $df;
    
    protected $dbMock;
    protected $lineMock;
    
    protected $context = 'arz_eng_06';
    protected $params;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        global $vlibPath;
        
        $this->pr = __DIR__ . '/../../../../../';
        $vlibPath = $this->pr . 'modules/utils-php/vlib/vlibTemplate.php';
        
        $this->params = new SRUWithFCSParameters('lax');
        $this->params->recordPacking = 'raw';
        $this->params->operation = 'explain';
        $this->params->xcontext = $this->context;
        $this->params->context = array($this->context);

        $this->t = new GlossaryOnSRU($this->params);
        
//        $this->dbMock = $this->getMock('mysqli',
        $this->dbMock = $this->getMock('NoRealClass',
                array('query', 'escape_string'));
        $ref = new \ReflectionProperty('ACDH\FCSSRU\mysqlonsru\GlossaryOnSRU', 'db');
        $ref->setAccessible(true);
        $ref->setValue($this->t, $this->dbMock);
        
        $this->df = new IndentDomDocument();
        $this->namespaces = array(
            'http://www.tei-c.org/ns/1.0' => 'tei',
            'http://clarin.eu/fcs/1.0' => 'fcs',
            'http://explain.z3950.org/dtd/2.0/' => 'zr',
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->params = null;      
    }

    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_explain() {
        $this->dbMock->expects($this->exactly(1))->method('query')
                ->with("SELECT entry FROM $this->context WHERE id = 1")
                ->willReturn(false);
        $ret = $this->t->explain();
        $this->assertInstanceOf('ACDH\\FCSSRU\\Http\\Response', $ret);
        $this->assertNotEquals('', $ret->getBody());
    }
    
    protected function setupDBMockForSqlScan($prefilter, $completeSql = null) {
        if (isset($completeSql)) {
            $this->expectedSqls = array(
                $completeSql
            );
        } else {
            $this->expectedSqls = array(
            "SELECT ndx.txt, base.entry, base.sid, COUNT(*) FROM $this->context AS base ".
            "INNER JOIN ".
                "(SELECT ndx.id, ndx.txt FROM ".
                $prefilter .
                "WHERE ndx.txt LIKE '%%' GROUP BY ndx.id) AS ndx ".
            "ON base.id = ndx.id  GROUP BY ndx.txt ORDER BY ndx.txt",            
            );
        }
        $this->dbMock->expects($this->exactly(1))->method('query')
                ->with($this->expectedSqls[0])
                ->willReturn(false);        
    }
    
    protected $expectedSqls = array();
    
    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_scan() {
        $this->params->operation = 'scan';
        $this->setupDBMockForSqlScan("$this->context"."_ndx AS ndx ");
        $ret = $this->t->scan();
        $this->assertInstanceOf('ACDH\FCSSRU\SRUDiagnostics', $ret);
    }
    
    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_rfpid_scan() {
        $this->params->operation = 'scan';
        $this->params->scanClause = 'rfpid';
        $this->setupDBMockForSqlScan('', "SELECT id, entry, sid FROM $this->context ORDER BY CAST(id AS SIGNED)");
        $ret = $this->t->scan();
        $this->assertInstanceOf('ACDH\FCSSRU\SRUDiagnostics', $ret);
    }
    
    protected function setupDBMockForSqlSearch($prefilter) {
        $query = $this->params->query;
        $this->dbMock->expects($this->at(0))->method('escape_string')
                ->with($this->params->query)
                ->willReturn($this->params->query);
        $this->expectedSqls = array(
            "SELECT entry FROM $this->context WHERE id = 1",
            "SELECT COUNT(*)  FROM $this->context AS base ".
            "INNER JOIN ".
                "(SELECT ndx.id, ndx.txt FROM ".
                $prefilter .
                "WHERE ndx.txt LIKE '%$query%' GROUP BY ndx.id) AS ndx ".
            "ON base.id = ndx.id ",
            "SELECT ndx.txt, base.entry, base.sid, COUNT(*) FROM $this->context AS base ".
                "INNER JOIN ".
                "(SELECT ndx.id, ndx.txt FROM ".
                $prefilter .
                "WHERE ndx.txt LIKE '%$query%' GROUP BY ndx.id) AS ndx ".
            "ON base.id = ndx.id  GROUP BY base.sid LIMIT 0, 10"
        );
        $this->dbMock->expects($this->at(1))->method('query')
                ->with($this->expectedSqls[0])
                ->willReturn(false);
        $this->dbMock->expects($this->at(2))->method('query')
                ->with($this->expectedSqls[1])
                ->willReturn(false);
        $this->dbMock->expects($this->at(3))->method('query')
                ->with($this->expectedSqls[2])
                ->willReturn(false);      
    }
    
    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_search() {
        $this->params->operation = 'searchRetrieve';
        $query = 'waer';
        $this->params->query = $query;
        $this->setupDBMockForSqlSearch("$this->context"."_ndx AS ndx ");
        $ret = $this->t->search();
        $this->assertInstanceOf('ACDH\FCSSRU\SRUDiagnostics', $ret);
    }
    
    protected function changeContext($anotherContext) {
        $this->context = $anotherContext;
        $this->params->xcontext = $anotherContext;
        $this->params->context[0] = $anotherContext;
    }
    
    protected function getReleasedPrefilter() {
        return "(SELECT tab.id, tab.xpath, tab.txt FROM $this->context"."_ndx AS tab ".
                     "INNER JOIN ".
                        "(SELECT inner.id FROM $this->context"."_ndx AS `inner` ".
                        "WHERE inner.txt = 'released' ".
                        "AND inner.xpath LIKE '%-change-f-status-') AS prefid ".
                     "ON tab.id = prefid.id WHERE tab.txt != '-') AS ndx ";
    }

    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_restricted_scan() {
        $this->params->operation = 'scan';
        $restrictedContext = 'aeb_eng_001__v001';
        $this->changeContext($restrictedContext);
        $this->setupDBMockForSqlScan($this->getReleasedPrefilter());
        
        $ret = $this->t->scan();
        
        $this->assertInstanceOf('ACDH\FCSSRU\SRUDiagnostics', $ret);
    }
        
    /**
     * @test
     */
    public function it_should_use_the_right_sql_for_restricted_search() {
        $this->params->operation = 'searchRetrieve';
        $query = 'waer';
        $this->params->query = $query;
        $restrictedContext = 'aeb_eng_001__v001';
        $this->changeContext($restrictedContext);
        $this->setupDBMockForSqlSearch($this->getReleasedPrefilter());
        
        $ret = $this->t->search();
        
        $this->assertInstanceOf('ACDH\FCSSRU\SRUDiagnostics', $ret);
    }
}
